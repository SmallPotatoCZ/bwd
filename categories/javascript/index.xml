<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>javascript on EsilyZhang 的备忘单</title>
    <link>https://www.zhangchao.online/categories/javascript/</link>
    <description>Recent content in javascript on EsilyZhang 的备忘单</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sat, 03 Aug 2019 18:49:22 +0800</lastBuildDate>
    
	<atom:link href="https://www.zhangchao.online/categories/javascript/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Webpack</title>
      <link>https://www.zhangchao.online/javascript/webpack/</link>
      <pubDate>Sat, 03 Aug 2019 18:49:22 +0800</pubDate>
      
      <guid>https://www.zhangchao.online/javascript/webpack/</guid>
      <description>Webpack 构建 graph LR webpack[Webpack] -- entry[入口] click entry callNotes &#34;entry&#34; webpack[Webpack] -- output[输出] click output callNotes &#34;output&#34;    应该使用的模块，作为构建内部依赖图的开始。默认 ./src/index.js。
一个或多个入口：
{ /*...*/ entry:{ entry1: &amp;#39;file1.js&amp;#39;, entry2: &amp;#39;file2.js&amp;#39; }, /*...*/ }   { /*...*/ output:{ filename: [name].bundle.js, // [name] 入口起点名字  path: path.resolve(__dirname) // 输出路径  } }   资源管理 - loader CSS  style-css css-loader
{ /*...*/ module:{ rules:[ { test: /\.css$/, use: [&amp;#39;style-loader&amp;#39;, &amp;#39;css-loader&amp;#39;] } ] } /*.</description>
    </item>
    
    <item>
      <title>Symbol</title>
      <link>https://www.zhangchao.online/javascript/symbol/</link>
      <pubDate>Fri, 02 Aug 2019 23:02:24 +0800</pubDate>
      
      <guid>https://www.zhangchao.online/javascript/symbol/</guid>
      <description>基础 Symbol 类型没有字面量的形式。主要作用是创建一个类字符串的不会与其它任何值冲突的值。
// 不能使用 new var sym = Symbol(&amp;#34;sym description&amp;#34;); // 识别 sym typeof sym; // sym 的字符串表示 sym.toString(); // 几乎隐藏的属性，类似元属性 var Foo = {}; Foo[sym] = &amp;#34;symbol&amp;#34;; // 不参与 for...in 的循环，但是 Object.assign 是能够将其复制 var clone = Object.assign({}, Foo);  使用 Symbol 全局搜索 (function () { var sym1 = Symbol(&amp;#34;symbol1&amp;#34;); var sym2 = Symbol(&amp;#34;symbol2&amp;#34;); })(); (function () { // 搜索全局 symbol  var sym_index1 = Symbol.for(&amp;#34;symbol1&amp;#34;); var sym_index2 = Symbol.</description>
    </item>
    
    <item>
      <title>Nodejs 基础</title>
      <link>https://www.zhangchao.online/javascript/nodejs/</link>
      <pubDate>Tue, 23 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhangchao.online/javascript/nodejs/</guid>
      <description> 安装 Ubuntu curl -sL https://deb.nodesource.com/setup_10.x | sudo -E bash - sudo apt-get install -y nodejs 配置淘宝镜像 npm config set registry https://r.npm.taobao.org/ 参考链接  snap cnpm  </description>
    </item>
    
    <item>
      <title>JavaScript 基础知识</title>
      <link>https://www.zhangchao.online/javascript/basic/</link>
      <pubDate>Wed, 10 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhangchao.online/javascript/basic/</guid>
      <description> 基本值和类型 值有类型，但变量无类型
内置类型：
 字符串（string） 数字（number） 布尔值（boolean） null 和 undefined 对象（object） 符号（symbol）  typeof typeof &amp;#34;helloworld&amp;#34;; // string typeof 10; // number typeof true; // bollean typeof null; // object typeof a; // undefined typeof []; // object typeof Symbol(&amp;#34;a&amp;#34;); // symbol typeof function(){}; // function  内置子对象 Array </description>
    </item>
    
    <item>
      <title>ES2015&#43;</title>
      <link>https://www.zhangchao.online/javascript/es6/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhangchao.online/javascript/es6/</guid>
      <description>语法 块作用域声明 let var a = 2; { let a = 3; console.log(&amp;#34;块作用域&amp;#34;, a); } console.log(&amp;#34;函数作用域&amp;#34;, a);  const { const a = 2; console.log(a); // 2  a = 3; // TypeError } // 常量不是对这个值本身的限制，而是对赋值的哪个变量的限制 { const a = [1, 2, 3]; a.push(4); console.log(a); // [1, 2, 3, 4]  a = 42; // TypeError }  块作用域函数 { foo(); function foo(){} } foo(); // ReferenceError  spread/rest spread function foo(a, b, c){ console.</description>
    </item>
    
  </channel>
</rss>