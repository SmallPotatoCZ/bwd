<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>vue on EsilyZhang 的备忘单</title>
    <link>https://www.zhangchao.online/categories/vue/</link>
    <description>Recent content in vue on EsilyZhang 的备忘单</description>
    <generator>Hugo -- gohugo.io</generator>
    <lastBuildDate>Sun, 04 Aug 2019 12:45:26 +0800</lastBuildDate>
    
	<atom:link href="https://www.zhangchao.online/categories/vue/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Vuex</title>
      <link>https://www.zhangchao.online/vue/vuex/</link>
      <pubDate>Sun, 04 Aug 2019 12:45:26 +0800</pubDate>
      
      <guid>https://www.zhangchao.online/vue/vuex/</guid>
      <description>Vuex graph LR mutation == 修改 == state action[Action] -- 修改 -- mutation[Mutation] state -.- getter[Getter] getter -.- view[View] state -.- view[视图] module[模块] -- state state -.- module click getter callNotes &#34;getter&#34; click state callNotes &#34;state&#34; click mutation callNotes &#34;mutation&#34; click action callNotes &#34;action&#34;    使用全局 state { computed:{ count() {return store.state.count;} } }  注入根组件 new Vue({ store: store }) // 使用 { computed: { count(){ returen this.</description>
    </item>
    
    <item>
      <title>Mvvm</title>
      <link>https://www.zhangchao.online/vue/mvvm/</link>
      <pubDate>Sat, 03 Aug 2019 10:50:53 +0800</pubDate>
      
      <guid>https://www.zhangchao.online/vue/mvvm/</guid>
      <description>MVVM 响应式数据 class Vue { constructor(options) { this.options = options; this.$data = options.data; this.$el = document.querySelector(options.el); this._directive = {}; this.Observer(this.$data); this.Compile(this.$el); } Observer(data) { for (let key in data) { this._directive[key] = []; let Val = data[key]; let Watcher = this._directive[key]; // this.$data 对象里面的每一个属性发生变化 更新视图  Object.defineProperty(this.$data, key, { get: function () { return Val; }, set: function (newVal) { if (newVal !== Val) { Val = newVal; Watcher.forEach(element =&amp;gt; { element.</description>
    </item>
    
    <item>
      <title>Vue</title>
      <link>https://www.zhangchao.online/vue/vue/</link>
      <pubDate>Mon, 22 Jul 2019 00:00:00 +0000</pubDate>
      
      <guid>https://www.zhangchao.online/vue/vue/</guid>
      <description>Vue 实例 语法 var vm = new VUe({ // 选项 });  数据和方法 var data = {a: 1}; var vm = new Vue({ data: data }); // 获取这个实例上的属性  vm.a == data.a; // true;  // 设置属性会影响原始的数据 vm.a = 2; data.a = 2; // 反之也是 data.a = 3; vm.a = 3;   只有在实例创建时data中存在的属性才是响应的。 Vue 实例中暴露的属性和方都会携带$前缀
 生命钩子 模板语法 插值 文本 &amp;lt;span&amp;gt;Message: {{msg}}&amp;lt;span&amp;gt; // v-noce 执行一次性的插值，当数据改变时，插值处的值并不会改变 原始 html {{}} 会将数据解释为普通文本，为了输出 HTML，使用v-html。</description>
    </item>
    
  </channel>
</rss>